{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"TP2-ExequielSantucho-DATITOS-V1","provenance":[{"file_id":"1VNn2nYJU1ADiNW42VoaK07XHBkmrjeUa","timestamp":1618765140373}],"collapsed_sections":[],"authorship_tag":"ABX9TyM/sxX6y3wPuVm+kjbramFa"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"0Zz30Atq_qo4"},"source":["# Trabajo Práctico Nº2: Aprendizaje Profundo 2021 by Datitos"]},{"cell_type":"markdown","metadata":{"id":"aZD3PD_AQ0wI"},"source":["Elaborado por Exequiel Santucho"]},{"cell_type":"markdown","metadata":{"id":"ZTl-rkcNAUWy"},"source":["## 0) Importación de librerías"]},{"cell_type":"markdown","metadata":{"id":"PKTAlOH67BIn"},"source":[""]},{"cell_type":"code","metadata":{"id":"uCh3Cqd5AdqZ","executionInfo":{"status":"ok","timestamp":1618837162915,"user_tz":180,"elapsed":4887,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}}},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt \n","import torch\n","from torch import nn\n","#!pip install -U d2l\n","#from d2l import torch as d2l\n","from google.colab import files"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BfQl89u1AhUm"},"source":["## 1) Preprocesamiento de Datos\n","### 1.1) Acceso y lectura del Dataset"]},{"cell_type":"markdown","metadata":{"id":"77_VaJUBIvNr"},"source":["Descargo de los archivos csv:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J41R5e-lGgE_","executionInfo":{"status":"ok","timestamp":1618837166452,"user_tz":180,"elapsed":8414,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}},"outputId":"cdaea4df-aeec-45fb-96c0-9529aee02c1f"},"source":["!gdown https://drive.google.com/uc?id=1asxGtRgNyelvRnwRAt7ONRSRvuy8t0zJ # Reemplazo \".../file/d/...\" por \".../uc?id=...\"\n","!gdown https://drive.google.com/uc?id=1n4jjZRCcUc5x9FDdu934FixU6x9_8Rrt # Reemplazo \".../file/d/...\" por \".../uc?id=...\""],"execution_count":2,"outputs":[{"output_type":"stream","text":["Downloading...\n","From: https://drive.google.com/uc?id=1asxGtRgNyelvRnwRAt7ONRSRvuy8t0zJ\n","To: /content/fifa2021_training.csv\n","3.28MB [00:00, 28.7MB/s]\n","Downloading...\n","From: https://drive.google.com/uc?id=1n4jjZRCcUc5x9FDdu934FixU6x9_8Rrt\n","To: /content/fifa2021_test.csv\n","100% 1.37M/1.37M [00:00<00:00, 21.4MB/s]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NbKXfVAwMSZx"},"source":["Importo los archivos y los almaceno en dos dataframes, separando en `train_data` y `test_data`:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"lEHumrxqI21-","executionInfo":{"status":"ok","timestamp":1618837170165,"user_tz":180,"elapsed":12120,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}},"outputId":"511c537d-95bb-460b-9820-b302f0b87bdb"},"source":["train_test_data = pd.read_csv('https://drive.google.com/uc?id=1asxGtRgNyelvRnwRAt7ONRSRvuy8t0zJ') # Importación de datos desde url\n","infer_data = pd.read_csv('https://drive.google.com/uc?id=1n4jjZRCcUc5x9FDdu934FixU6x9_8Rrt') # Importación de datos desde url\n","\n","print(train_test_data.shape)\n","print(infer_data.shape)\n","#print(train_data.iloc[0:4, [0, 1, 2, 3, -3, -2, -1]])\n","\n","train_test_data.head(5) # Visualización de 5 primeras filas del dataframe"],"execution_count":3,"outputs":[{"output_type":"stream","text":["(13921, 53)\n","(5909, 52)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>Name</th>\n","      <th>Natinality</th>\n","      <th>Overal</th>\n","      <th>Potential</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>PreferredFoot</th>\n","      <th>BirthDate</th>\n","      <th>Age</th>\n","      <th>PlayerWorkRate</th>\n","      <th>WeakFoot</th>\n","      <th>SkillMoves</th>\n","      <th>Value</th>\n","      <th>Wage</th>\n","      <th>Club</th>\n","      <th>Club_KitNumber</th>\n","      <th>Club_JoinedClub</th>\n","      <th>Club_ContractLength</th>\n","      <th>BallControl</th>\n","      <th>Dribbling</th>\n","      <th>Marking</th>\n","      <th>SlideTackle</th>\n","      <th>StandTackle</th>\n","      <th>Aggression</th>\n","      <th>Reactions</th>\n","      <th>Interceptions</th>\n","      <th>Vision</th>\n","      <th>Composure</th>\n","      <th>Crossing</th>\n","      <th>ShortPass</th>\n","      <th>LongPass</th>\n","      <th>Acceleration</th>\n","      <th>Stamina</th>\n","      <th>Strength</th>\n","      <th>Balance</th>\n","      <th>SprintSpeed</th>\n","      <th>Agility</th>\n","      <th>Jumping</th>\n","      <th>Heading</th>\n","      <th>ShotPower</th>\n","      <th>Finishing</th>\n","      <th>LongShots</th>\n","      <th>Curve</th>\n","      <th>FKAcc</th>\n","      <th>Penalties</th>\n","      <th>Volleys</th>\n","      <th>GKDiving</th>\n","      <th>GKHandling</th>\n","      <th>GKKicking</th>\n","      <th>GKReflexes</th>\n","      <th>Sex</th>\n","      <th>Position</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>243620</td>\n","      <td>Adam Hellborg</td>\n","      <td>Sweden</td>\n","      <td>64</td>\n","      <td>73</td>\n","      <td>188</td>\n","      <td>79</td>\n","      <td>R</td>\n","      <td>July 30, 1998</td>\n","      <td>22</td>\n","      <td>Medium/Medium</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1200000.0</td>\n","      <td>1500.0</td>\n","      <td>IK Sirius</td>\n","      <td>2.0</td>\n","      <td>Jan. 8, 2020</td>\n","      <td>2022</td>\n","      <td>62</td>\n","      <td>55</td>\n","      <td>60</td>\n","      <td>57</td>\n","      <td>60</td>\n","      <td>71</td>\n","      <td>58</td>\n","      <td>60</td>\n","      <td>61</td>\n","      <td>63</td>\n","      <td>44</td>\n","      <td>67</td>\n","      <td>64</td>\n","      <td>54</td>\n","      <td>66</td>\n","      <td>70</td>\n","      <td>54</td>\n","      <td>46</td>\n","      <td>58</td>\n","      <td>57</td>\n","      <td>53</td>\n","      <td>55</td>\n","      <td>39</td>\n","      <td>43</td>\n","      <td>39</td>\n","      <td>33</td>\n","      <td>43</td>\n","      <td>41</td>\n","      <td>13</td>\n","      <td>10</td>\n","      <td>13</td>\n","      <td>12</td>\n","      <td>Male</td>\n","      <td>MID</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>248565</td>\n","      <td>Cristian Cedrés</td>\n","      <td>Spain</td>\n","      <td>67</td>\n","      <td>70</td>\n","      <td>172</td>\n","      <td>64</td>\n","      <td>R</td>\n","      <td>Jan. 24, 1996</td>\n","      <td>25</td>\n","      <td>High/Medium</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1400000.0</td>\n","      <td>3300.0</td>\n","      <td>UD Las Palmas</td>\n","      <td>28.0</td>\n","      <td>July 17, 2018</td>\n","      <td>2021</td>\n","      <td>66</td>\n","      <td>68</td>\n","      <td>33</td>\n","      <td>34</td>\n","      <td>33</td>\n","      <td>37</td>\n","      <td>64</td>\n","      <td>20</td>\n","      <td>58</td>\n","      <td>67</td>\n","      <td>64</td>\n","      <td>62</td>\n","      <td>57</td>\n","      <td>84</td>\n","      <td>65</td>\n","      <td>57</td>\n","      <td>78</td>\n","      <td>80</td>\n","      <td>80</td>\n","      <td>42</td>\n","      <td>49</td>\n","      <td>75</td>\n","      <td>60</td>\n","      <td>69</td>\n","      <td>64</td>\n","      <td>61</td>\n","      <td>65</td>\n","      <td>59</td>\n","      <td>12</td>\n","      <td>9</td>\n","      <td>6</td>\n","      <td>15</td>\n","      <td>Male</td>\n","      <td>MID</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>203781</td>\n","      <td>Donny Toia</td>\n","      <td>United States</td>\n","      <td>68</td>\n","      <td>68</td>\n","      <td>173</td>\n","      <td>70</td>\n","      <td>L</td>\n","      <td>May 28, 1992</td>\n","      <td>28</td>\n","      <td>Medium/Medium</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1100000.0</td>\n","      <td>3400.0</td>\n","      <td>Real Salt Lake</td>\n","      <td>4.0</td>\n","      <td>Feb. 13, 2019</td>\n","      <td>2024</td>\n","      <td>62</td>\n","      <td>63</td>\n","      <td>62</td>\n","      <td>63</td>\n","      <td>64</td>\n","      <td>74</td>\n","      <td>64</td>\n","      <td>72</td>\n","      <td>54</td>\n","      <td>61</td>\n","      <td>62</td>\n","      <td>63</td>\n","      <td>56</td>\n","      <td>74</td>\n","      <td>75</td>\n","      <td>64</td>\n","      <td>72</td>\n","      <td>68</td>\n","      <td>66</td>\n","      <td>81</td>\n","      <td>62</td>\n","      <td>68</td>\n","      <td>39</td>\n","      <td>62</td>\n","      <td>58</td>\n","      <td>34</td>\n","      <td>49</td>\n","      <td>46</td>\n","      <td>15</td>\n","      <td>6</td>\n","      <td>15</td>\n","      <td>16</td>\n","      <td>Male</td>\n","      <td>DEF</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>259771</td>\n","      <td>Léo Andrade</td>\n","      <td>Brazil</td>\n","      <td>63</td>\n","      <td>70</td>\n","      <td>190</td>\n","      <td>76</td>\n","      <td>L</td>\n","      <td>April 18, 1998</td>\n","      <td>22</td>\n","      <td>Medium/High</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>900000.0</td>\n","      <td>1800.0</td>\n","      <td>Marítimo</td>\n","      <td>66.0</td>\n","      <td>July 31, 2020</td>\n","      <td>2022</td>\n","      <td>36</td>\n","      <td>31</td>\n","      <td>69</td>\n","      <td>68</td>\n","      <td>72</td>\n","      <td>55</td>\n","      <td>55</td>\n","      <td>57</td>\n","      <td>36</td>\n","      <td>48</td>\n","      <td>35</td>\n","      <td>49</td>\n","      <td>48</td>\n","      <td>62</td>\n","      <td>68</td>\n","      <td>70</td>\n","      <td>66</td>\n","      <td>61</td>\n","      <td>53</td>\n","      <td>71</td>\n","      <td>59</td>\n","      <td>43</td>\n","      <td>28</td>\n","      <td>29</td>\n","      <td>25</td>\n","      <td>29</td>\n","      <td>48</td>\n","      <td>39</td>\n","      <td>9</td>\n","      <td>12</td>\n","      <td>11</td>\n","      <td>6</td>\n","      <td>Male</td>\n","      <td>DEF</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>226706</td>\n","      <td>Felipe Pires</td>\n","      <td>Brazil</td>\n","      <td>69</td>\n","      <td>72</td>\n","      <td>178</td>\n","      <td>68</td>\n","      <td>R</td>\n","      <td>April 18, 1995</td>\n","      <td>25</td>\n","      <td>High/Medium</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1800000.0</td>\n","      <td>6400.0</td>\n","      <td>Moreirense FC</td>\n","      <td>10.0</td>\n","      <td>Sept. 15, 2020</td>\n","      <td>2023</td>\n","      <td>69</td>\n","      <td>73</td>\n","      <td>47</td>\n","      <td>43</td>\n","      <td>36</td>\n","      <td>46</td>\n","      <td>59</td>\n","      <td>27</td>\n","      <td>64</td>\n","      <td>53</td>\n","      <td>65</td>\n","      <td>62</td>\n","      <td>65</td>\n","      <td>79</td>\n","      <td>74</td>\n","      <td>44</td>\n","      <td>73</td>\n","      <td>79</td>\n","      <td>78</td>\n","      <td>55</td>\n","      <td>45</td>\n","      <td>57</td>\n","      <td>62</td>\n","      <td>44</td>\n","      <td>56</td>\n","      <td>43</td>\n","      <td>56</td>\n","      <td>53</td>\n","      <td>8</td>\n","      <td>11</td>\n","      <td>10</td>\n","      <td>15</td>\n","      <td>Male</td>\n","      <td>MID</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       ID             Name     Natinality  ...  GKReflexes   Sex  Position\n","0  243620    Adam Hellborg         Sweden  ...          12  Male       MID\n","1  248565  Cristian Cedrés          Spain  ...          15  Male       MID\n","2  203781       Donny Toia  United States  ...          16  Male       DEF\n","3  259771      Léo Andrade         Brazil  ...           6  Male       DEF\n","4  226706     Felipe Pires         Brazil  ...          15  Male       MID\n","\n","[5 rows x 53 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"q4wlKyL49aEt"},"source":["Partición del dataset"]},{"cell_type":"code","metadata":{"id":"me0SoUzg9dny","executionInfo":{"status":"ok","timestamp":1618837171294,"user_tz":180,"elapsed":13247,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}}},"source":["from sklearn.model_selection import train_test_split\n","\n","train_data, test_data = train_test_split(train_test_data, stratify=train_test_data.Position, train_size=0.9, random_state=42)"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mmIYS5GjSJhk"},"source":["Concateno ambos dataframes, deshaciéndome de la primer feature (ID), ya que no aporta información para la predicción posterior. También chequeo la presencia de valores faltantes (NaN)."]},{"cell_type":"code","metadata":{"id":"zAw6HkT3STTB","executionInfo":{"status":"ok","timestamp":1618837171294,"user_tz":180,"elapsed":13245,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}}},"source":["# all_features = pd.concat((train_data.iloc[:, 1:-1], test_data.iloc[:, 1:-1], infer_data.iloc[:, 1:])) # Se nota que del train_data se quita también la última feature que es el label\n","\n","# all_features.isna() # Valores faltantes\n","# all_features.isna().sum()  # Total de valores faltantes por columnas"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"T5xvk-SkTszE"},"source":["### 1.2) Preprecesamiento de los datos"]},{"cell_type":"markdown","metadata":{"id":"3HthzMydVcXR"},"source":["Teniendo una amplia vairiedad de tipos de datos y valores se reemplazan en primer lugar las features numéricas con valores medios, escalados con media nula y desviación estándar unitaria"]},{"cell_type":"code","metadata":{"id":"HcPZHP09Fp8q","executionInfo":{"status":"ok","timestamp":1618837171295,"user_tz":180,"elapsed":13245,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}}},"source":["from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import make_column_transformer\n","\n","variables_descartar = [\n","    'Position', # variable objetivo\n","    'ID',\n","    'Name',\n","    'Natinality',\n","    'BirthDate',\n","    'Age',\n","    'Value',\n","    'Wage',\n","    'Club',\n","    'Club_KitNumber',\n","    'Club_JoinedClub',\n","    'Club_ContractLength',\n","]\n","\n","variables_categóricas = train_test_data.drop(columns=variables_descartar).select_dtypes(include=np.object).columns\n","variables_numéricas   = train_test_data.drop(columns=variables_descartar).select_dtypes(include=np.number).columns\n","\n","transformador = make_column_transformer(\n","    (OneHotEncoder(),  variables_categóricas), # PreferredFoot, PlayerWorkRate, Sex\n","    (StandardScaler(), variables_numéricas),   # Overal, Potential, Height, etc.\n","    remainder='drop' # descarta las columnas no mencionadas en las transformaciones\n",")\n","\n"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tVBQTvL1_xKy"},"source":["Entranamiento de transformador"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8g5rzXU3_zkT","executionInfo":{"status":"ok","timestamp":1618837171295,"user_tz":180,"elapsed":13238,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}},"outputId":"b1e72aaa-5915-4dc3-a76e-21cd31891046"},"source":["transformador.fit(train_data)"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ColumnTransformer(n_jobs=None, remainder='drop', sparse_threshold=0.3,\n","                  transformer_weights=None,\n","                  transformers=[('onehotencoder',\n","                                 OneHotEncoder(categories='auto', drop=None,\n","                                               dtype=<class 'numpy.float64'>,\n","                                               handle_unknown='error',\n","                                               sparse=True),\n","                                 Index(['PreferredFoot', 'PlayerWorkRate', 'Sex'], dtype='object')),\n","                                ('standardscaler',\n","                                 StandardScaler(copy=True, with_mean=Tr...\n","       'BallControl', 'Dribbling', 'Marking', 'SlideTackle', 'StandTackle',\n","       'Aggression', 'Reactions', 'Interceptions', 'Vision', 'Composure',\n","       'Crossing', 'ShortPass', 'LongPass', 'Acceleration', 'Stamina',\n","       'Strength', 'Balance', 'SprintSpeed', 'Agility', 'Jumping', 'Heading',\n","       'ShotPower', 'Finishing', 'LongShots', 'Curve', 'FKAcc', 'Penalties',\n","       'Volleys', 'GKDiving', 'GKHandling', 'GKKicking', 'GKReflexes'],\n","      dtype='object'))],\n","                  verbose=False)"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"2guIVC69AC_J"},"source":["Transformaciones del dataset\n"]},{"cell_type":"code","metadata":{"id":"lxkyWQWGAFth","executionInfo":{"status":"ok","timestamp":1618837171296,"user_tz":180,"elapsed":13238,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}}},"source":["# el transformador se queja si falta alguna columna de df_train :/\n","infer_data['Position'] = None\n","\n","X_train = transformador.transform(train_data)\n","X_test = transformador.transform(test_data)\n","X_infer = transformador.transform(infer_data)"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tlTd8v1DAWiB"},"source":["### Transformar variable objetivo\n","\n","Como la variable objetivo es del tipo string, hay que llevarla a un tipo numérico para que PyTorch pueda procesarla.\n","\n","Este transformador mapea posiciones DEF, FWD, GK, MID a enteros **y viceversa** — la transformación inversa será útil para convertir las predicciones (enteros) en posiciones otra vez."]},{"cell_type":"code","metadata":{"id":"A84yPfy9AXZM","executionInfo":{"status":"ok","timestamp":1618837171296,"user_tz":180,"elapsed":13237,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}}},"source":["from sklearn.preprocessing import LabelEncoder\n","\n","transformador_etiquetas = LabelEncoder()\n","\n","transformador_etiquetas.fit(train_data.Position)\n","\n","y_train = transformador_etiquetas.transform(train_data.Position)\n","y_test = transformador_etiquetas.transform(test_data.Position)"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"w0KqYHHFAiVt"},"source":["### Instanciar Datasets de PyTorch\n","\n","El aprendizaje profundo es especialmente efectivo para imágenes y texto; para datos tabulares (como un DataFrame) el aprendizaje de máquinas clásico suele funcionar bastante bien, de ahí que PyTorch no cuente con facilidades para tratar este tipo de problemas."]},{"cell_type":"code","metadata":{"id":"EL4k1RZmAi86","executionInfo":{"status":"ok","timestamp":1618837171296,"user_tz":180,"elapsed":13235,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}}},"source":["from torch.utils.data import Dataset\n","\n","class Tabular(Dataset):\n","    def __init__(self, X, y=None):\n","        self.X = X.astype(np.float32) # soluciona \"Expected object of scalar type Float but got scalar type Double\"\n","        self.y = y \n","\n","    def __len__(self):\n","        return len(self.X)\n","    \n","    def __getitem__(self, item):\n","        if self.y is None:\n","            return self.X[item]\n","        else:\n","            return self.X[item], self.y[item]\n","\n","        \n","ds_train = Tabular(X_train, y_train)"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"io2ADgfhCQcR"},"source":["Como el dataset es liviano y entra en la memoria se emplean tensores"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sjmfPlDiCPgT","executionInfo":{"status":"ok","timestamp":1618837171297,"user_tz":180,"elapsed":13230,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}},"outputId":"50dd6860-9bdd-40c6-b1bb-efb0622b8edc"},"source":["# ds_valid = Tabular(X_valid, y_valid) # No hago esto\n","# ds_infer = Tabular(X_infer) # No hago esto\n","\n","ds_train[10]"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 0.        ,  1.        ,  0.        ,  0.        ,  0.        ,\n","         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n","         1.        ,  0.        ,  1.        ,  2.2005258 ,  1.7577571 ,\n","         1.6827489 ,  0.69650096,  2.9999895 , -0.49693993,  1.5163243 ,\n","         1.0263261 ,  0.5255314 , -1.4219726 , -0.93868953,  0.10657337,\n","         2.1206129 ,  0.13522774,  1.5071335 ,  2.1563685 ,  0.6801946 ,\n","         1.1708272 ,  1.3763508 , -0.25280562,  0.7491539 ,  1.286718  ,\n","        -2.0082333 , -0.4727765 , -0.531109  , -0.06149001,  1.7349557 ,\n","         2.030825  ,  2.0725315 ,  1.5956575 ,  0.90770805,  0.6198386 ,\n","         1.1499894 ,  1.857724  , -0.42461264, -0.31164196, -0.19319764,\n","        -0.09562566], dtype=float32), 1)"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"7UmJenUECfoO"},"source":["### Instanciar DataLoaders de PyTorch"]},{"cell_type":"code","metadata":{"id":"Z2TLUFxQChKP","executionInfo":{"status":"ok","timestamp":1618837171297,"user_tz":180,"elapsed":13228,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}}},"source":["from torch.utils.data import DataLoader\n","\n","dl_train = DataLoader(ds_train, batch_size=32, shuffle=True)"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gBt1eQDMC5Zi"},"source":["Una de las cosas que `DataLoader` hace es convertir arreglos de NumPy en tensores de PyTorch. Pero defino tensores a mano"]},{"cell_type":"code","metadata":{"id":"dcvqnR9lCymu","executionInfo":{"status":"ok","timestamp":1618837171297,"user_tz":180,"elapsed":13227,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}}},"source":["X_test = torch.tensor(X_test).float()\n","X_infer = torch.tensor(X_infer).float()\n","\n","y_test = torch.tensor(y_test)"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cZKqUzaHDUBj"},"source":["### Instanciar modelo"]},{"cell_type":"code","metadata":{"id":"UtqYgcrCDU6k","executionInfo":{"status":"ok","timestamp":1618837171298,"user_tz":180,"elapsed":13227,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}}},"source":["import torch\n","import torch.nn as nn"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"Lnm2qpmNDYHn","executionInfo":{"status":"ok","timestamp":1618837171298,"user_tz":180,"elapsed":13225,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}}},"source":["IN  = X_train.shape[1]\n","OUT = len(transformador_etiquetas.classes_)\n","\n","modelo = nn.Sequential(\n","    nn.Linear(IN,  8),\n","    nn.Linear(8, 64), nn.ReLU(),\n","    nn.Linear(64, 32), nn.ReLU(),\n","    nn.Linear(32, OUT)\n",")\n","\n","# modelo = nn.Sequential(\n","#     nn.Linear(IN,  8),\n","#     nn.Linear(8, 64), nn.ReLU(),\n","#     nn.Linear(64, 512), nn.ReLU(),\n","#     nn.Linear(512, 64), nn.ReLU(),\n","#     nn.Linear(64, 32), nn.ReLU(),\n","#     nn.Linear(32, OUT)\n","# )"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"fk9sO_r1EENL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618837171298,"user_tz":180,"elapsed":13216,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}},"outputId":"59fc6b90-67c8-4b24-be07-e49b9e1e0c7e"},"source":["# Para el criterio introduzco un tensor con pesos, para eso averiguo las cantidades\n","# de cada categoría \"Position\" del train_data\n","from collections import Counter\n","#print(train_data.Position.values)\n","cantidades = Counter(train_data.Position.values)\n","print(cantidades) # MID=4564, DEF=4126, FWD=2443, GK=1395\n","print(transformador_etiquetas.classes_) # ORDEN ETIQUETAS: 'DEF' 'FWD' 'GK' 'MID'\n","\n","# Tensor de pesos\n","pesos = torch.tensor([cantidades['DEF'], cantidades['FWD'], cantidades['GK'],\n","                      cantidades['MID']], dtype=torch.float32)\n","pesos = pesos / pesos.sum()\n","\n","#criterio = nn.CrossEntropyLoss()\n","criterio = nn.CrossEntropyLoss(weight=pesos)\n","optimizador = torch.optim.Adam(modelo.parameters(), lr=0.0001)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Counter({'MID': 4564, 'DEF': 4126, 'FWD': 2443, 'GK': 1395})\n","['DEF' 'FWD' 'GK' 'MID']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"BFNinWHkEIIA"},"source":["### Entrenar modelo"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S_OjI1CLEIrF","executionInfo":{"status":"ok","timestamp":1618789384038,"user_tz":180,"elapsed":591118,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}},"outputId":"10432382-92bd-46fd-b692-75d36af1909a"},"source":["from sklearn.metrics import balanced_accuracy_score\n","\n","epocas = 100\n","\n","for epoca in range(epocas):\n","    # activa capas Dropout, BatchNorm si las hubiese\n","    modelo.train()\n","\n","    perdidas_train = []\n","    \n","    for X_lote, y_lote in dl_train:\n","        optimizador.zero_grad()\n","\n","        predicciones = modelo(X_lote)\n","        perdida = criterio(predicciones, y_lote)\n","\n","        perdida.backward()\n","        optimizador.step()\n","        \n","        perdidas_train.append(perdida.item())\n","    \n","    # desactiva capas Dropout, BatchNorm si las hubiese\n","    modelo.eval()\n","    \n","    with torch.no_grad():\n","        predicciones = modelo(X_test)\n","        perdida = criterio(predicciones, y_test)\n","        \n","        y_pred = predicciones.argmax(dim=1) # selecciona la clase con mayor probabilidad\n","        \n","        efectividad = balanced_accuracy_score(y_test, y_pred)\n","    \n","    \n","    print(f'{epoca:3d}  |  Train loss: {np.mean(perdidas_train):.3f}    Valid loss: {perdida:.3f}    Valid accuracy: {efectividad:.2f}')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["  0  |  Train loss: 0.812    Valid loss: 0.410    Valid accuracy: 0.81\n","  1  |  Train loss: 0.350    Valid loss: 0.328    Valid accuracy: 0.86\n","  2  |  Train loss: 0.307    Valid loss: 0.304    Valid accuracy: 0.88\n","  3  |  Train loss: 0.288    Valid loss: 0.291    Valid accuracy: 0.86\n","  4  |  Train loss: 0.278    Valid loss: 0.300    Valid accuracy: 0.88\n","  5  |  Train loss: 0.270    Valid loss: 0.277    Valid accuracy: 0.87\n","  6  |  Train loss: 0.264    Valid loss: 0.278    Valid accuracy: 0.88\n","  7  |  Train loss: 0.261    Valid loss: 0.275    Valid accuracy: 0.89\n","  8  |  Train loss: 0.257    Valid loss: 0.269    Valid accuracy: 0.88\n","  9  |  Train loss: 0.253    Valid loss: 0.267    Valid accuracy: 0.89\n"," 10  |  Train loss: 0.251    Valid loss: 0.275    Valid accuracy: 0.89\n"," 11  |  Train loss: 0.248    Valid loss: 0.266    Valid accuracy: 0.89\n"," 12  |  Train loss: 0.246    Valid loss: 0.273    Valid accuracy: 0.88\n"," 13  |  Train loss: 0.246    Valid loss: 0.270    Valid accuracy: 0.89\n"," 14  |  Train loss: 0.243    Valid loss: 0.265    Valid accuracy: 0.89\n"," 15  |  Train loss: 0.241    Valid loss: 0.267    Valid accuracy: 0.89\n"," 16  |  Train loss: 0.240    Valid loss: 0.258    Valid accuracy: 0.89\n"," 17  |  Train loss: 0.238    Valid loss: 0.259    Valid accuracy: 0.89\n"," 18  |  Train loss: 0.238    Valid loss: 0.262    Valid accuracy: 0.89\n"," 19  |  Train loss: 0.236    Valid loss: 0.259    Valid accuracy: 0.89\n"," 20  |  Train loss: 0.235    Valid loss: 0.264    Valid accuracy: 0.89\n"," 21  |  Train loss: 0.234    Valid loss: 0.253    Valid accuracy: 0.88\n"," 22  |  Train loss: 0.232    Valid loss: 0.257    Valid accuracy: 0.89\n"," 23  |  Train loss: 0.231    Valid loss: 0.255    Valid accuracy: 0.89\n"," 24  |  Train loss: 0.229    Valid loss: 0.255    Valid accuracy: 0.89\n"," 25  |  Train loss: 0.230    Valid loss: 0.255    Valid accuracy: 0.89\n"," 26  |  Train loss: 0.229    Valid loss: 0.261    Valid accuracy: 0.90\n"," 27  |  Train loss: 0.227    Valid loss: 0.255    Valid accuracy: 0.88\n"," 28  |  Train loss: 0.226    Valid loss: 0.255    Valid accuracy: 0.89\n"," 29  |  Train loss: 0.226    Valid loss: 0.252    Valid accuracy: 0.89\n"," 30  |  Train loss: 0.226    Valid loss: 0.266    Valid accuracy: 0.90\n"," 31  |  Train loss: 0.223    Valid loss: 0.256    Valid accuracy: 0.89\n"," 32  |  Train loss: 0.224    Valid loss: 0.253    Valid accuracy: 0.88\n"," 33  |  Train loss: 0.221    Valid loss: 0.254    Valid accuracy: 0.88\n"," 34  |  Train loss: 0.222    Valid loss: 0.251    Valid accuracy: 0.89\n"," 35  |  Train loss: 0.220    Valid loss: 0.257    Valid accuracy: 0.89\n"," 36  |  Train loss: 0.219    Valid loss: 0.254    Valid accuracy: 0.89\n"," 37  |  Train loss: 0.220    Valid loss: 0.250    Valid accuracy: 0.88\n"," 38  |  Train loss: 0.218    Valid loss: 0.254    Valid accuracy: 0.88\n"," 39  |  Train loss: 0.218    Valid loss: 0.251    Valid accuracy: 0.88\n"," 40  |  Train loss: 0.217    Valid loss: 0.251    Valid accuracy: 0.89\n"," 41  |  Train loss: 0.216    Valid loss: 0.262    Valid accuracy: 0.88\n"," 42  |  Train loss: 0.215    Valid loss: 0.256    Valid accuracy: 0.89\n"," 43  |  Train loss: 0.215    Valid loss: 0.250    Valid accuracy: 0.89\n"," 44  |  Train loss: 0.214    Valid loss: 0.250    Valid accuracy: 0.88\n"," 45  |  Train loss: 0.215    Valid loss: 0.251    Valid accuracy: 0.88\n"," 46  |  Train loss: 0.212    Valid loss: 0.253    Valid accuracy: 0.87\n"," 47  |  Train loss: 0.213    Valid loss: 0.251    Valid accuracy: 0.88\n"," 48  |  Train loss: 0.211    Valid loss: 0.253    Valid accuracy: 0.88\n"," 49  |  Train loss: 0.210    Valid loss: 0.265    Valid accuracy: 0.89\n"," 50  |  Train loss: 0.210    Valid loss: 0.253    Valid accuracy: 0.88\n"," 51  |  Train loss: 0.210    Valid loss: 0.252    Valid accuracy: 0.88\n"," 52  |  Train loss: 0.211    Valid loss: 0.254    Valid accuracy: 0.88\n"," 53  |  Train loss: 0.209    Valid loss: 0.255    Valid accuracy: 0.88\n"," 54  |  Train loss: 0.208    Valid loss: 0.256    Valid accuracy: 0.89\n"," 55  |  Train loss: 0.208    Valid loss: 0.255    Valid accuracy: 0.88\n"," 56  |  Train loss: 0.207    Valid loss: 0.266    Valid accuracy: 0.89\n"," 57  |  Train loss: 0.207    Valid loss: 0.254    Valid accuracy: 0.88\n"," 58  |  Train loss: 0.207    Valid loss: 0.264    Valid accuracy: 0.89\n"," 59  |  Train loss: 0.207    Valid loss: 0.258    Valid accuracy: 0.89\n"," 60  |  Train loss: 0.204    Valid loss: 0.255    Valid accuracy: 0.89\n"," 61  |  Train loss: 0.204    Valid loss: 0.262    Valid accuracy: 0.89\n"," 62  |  Train loss: 0.204    Valid loss: 0.260    Valid accuracy: 0.89\n"," 63  |  Train loss: 0.203    Valid loss: 0.257    Valid accuracy: 0.88\n"," 64  |  Train loss: 0.204    Valid loss: 0.259    Valid accuracy: 0.88\n"," 65  |  Train loss: 0.203    Valid loss: 0.262    Valid accuracy: 0.89\n"," 66  |  Train loss: 0.203    Valid loss: 0.258    Valid accuracy: 0.88\n"," 67  |  Train loss: 0.201    Valid loss: 0.265    Valid accuracy: 0.89\n"," 68  |  Train loss: 0.201    Valid loss: 0.265    Valid accuracy: 0.89\n"," 69  |  Train loss: 0.200    Valid loss: 0.259    Valid accuracy: 0.88\n"," 70  |  Train loss: 0.200    Valid loss: 0.268    Valid accuracy: 0.89\n"," 71  |  Train loss: 0.199    Valid loss: 0.259    Valid accuracy: 0.89\n"," 72  |  Train loss: 0.199    Valid loss: 0.261    Valid accuracy: 0.89\n"," 73  |  Train loss: 0.199    Valid loss: 0.260    Valid accuracy: 0.88\n"," 74  |  Train loss: 0.198    Valid loss: 0.263    Valid accuracy: 0.89\n"," 75  |  Train loss: 0.198    Valid loss: 0.259    Valid accuracy: 0.88\n"," 76  |  Train loss: 0.197    Valid loss: 0.258    Valid accuracy: 0.88\n"," 77  |  Train loss: 0.197    Valid loss: 0.260    Valid accuracy: 0.89\n"," 78  |  Train loss: 0.197    Valid loss: 0.261    Valid accuracy: 0.88\n"," 79  |  Train loss: 0.197    Valid loss: 0.263    Valid accuracy: 0.88\n"," 80  |  Train loss: 0.195    Valid loss: 0.272    Valid accuracy: 0.88\n"," 81  |  Train loss: 0.195    Valid loss: 0.265    Valid accuracy: 0.88\n"," 82  |  Train loss: 0.196    Valid loss: 0.261    Valid accuracy: 0.88\n"," 83  |  Train loss: 0.195    Valid loss: 0.271    Valid accuracy: 0.89\n"," 84  |  Train loss: 0.194    Valid loss: 0.273    Valid accuracy: 0.89\n"," 85  |  Train loss: 0.193    Valid loss: 0.265    Valid accuracy: 0.89\n"," 86  |  Train loss: 0.193    Valid loss: 0.268    Valid accuracy: 0.89\n"," 87  |  Train loss: 0.193    Valid loss: 0.278    Valid accuracy: 0.89\n"," 88  |  Train loss: 0.193    Valid loss: 0.274    Valid accuracy: 0.89\n"," 89  |  Train loss: 0.192    Valid loss: 0.266    Valid accuracy: 0.88\n"," 90  |  Train loss: 0.191    Valid loss: 0.265    Valid accuracy: 0.89\n"," 91  |  Train loss: 0.191    Valid loss: 0.261    Valid accuracy: 0.88\n"," 92  |  Train loss: 0.191    Valid loss: 0.291    Valid accuracy: 0.89\n"," 93  |  Train loss: 0.191    Valid loss: 0.273    Valid accuracy: 0.88\n"," 94  |  Train loss: 0.190    Valid loss: 0.272    Valid accuracy: 0.89\n"," 95  |  Train loss: 0.189    Valid loss: 0.266    Valid accuracy: 0.88\n"," 96  |  Train loss: 0.188    Valid loss: 0.269    Valid accuracy: 0.88\n"," 97  |  Train loss: 0.188    Valid loss: 0.266    Valid accuracy: 0.89\n"," 98  |  Train loss: 0.189    Valid loss: 0.266    Valid accuracy: 0.88\n"," 99  |  Train loss: 0.189    Valid loss: 0.271    Valid accuracy: 0.89\n","100  |  Train loss: 0.186    Valid loss: 0.272    Valid accuracy: 0.88\n","101  |  Train loss: 0.187    Valid loss: 0.273    Valid accuracy: 0.89\n","102  |  Train loss: 0.186    Valid loss: 0.276    Valid accuracy: 0.89\n","103  |  Train loss: 0.186    Valid loss: 0.279    Valid accuracy: 0.89\n","104  |  Train loss: 0.186    Valid loss: 0.269    Valid accuracy: 0.88\n","105  |  Train loss: 0.185    Valid loss: 0.271    Valid accuracy: 0.89\n","106  |  Train loss: 0.184    Valid loss: 0.270    Valid accuracy: 0.89\n","107  |  Train loss: 0.185    Valid loss: 0.280    Valid accuracy: 0.89\n","108  |  Train loss: 0.184    Valid loss: 0.269    Valid accuracy: 0.89\n","109  |  Train loss: 0.185    Valid loss: 0.275    Valid accuracy: 0.89\n","110  |  Train loss: 0.182    Valid loss: 0.276    Valid accuracy: 0.89\n","111  |  Train loss: 0.183    Valid loss: 0.294    Valid accuracy: 0.89\n","112  |  Train loss: 0.182    Valid loss: 0.285    Valid accuracy: 0.89\n","113  |  Train loss: 0.182    Valid loss: 0.285    Valid accuracy: 0.89\n","114  |  Train loss: 0.182    Valid loss: 0.281    Valid accuracy: 0.88\n","115  |  Train loss: 0.181    Valid loss: 0.283    Valid accuracy: 0.89\n","116  |  Train loss: 0.181    Valid loss: 0.275    Valid accuracy: 0.89\n","117  |  Train loss: 0.181    Valid loss: 0.279    Valid accuracy: 0.89\n","118  |  Train loss: 0.180    Valid loss: 0.278    Valid accuracy: 0.89\n","119  |  Train loss: 0.179    Valid loss: 0.283    Valid accuracy: 0.89\n","120  |  Train loss: 0.180    Valid loss: 0.287    Valid accuracy: 0.89\n","121  |  Train loss: 0.179    Valid loss: 0.279    Valid accuracy: 0.89\n","122  |  Train loss: 0.178    Valid loss: 0.292    Valid accuracy: 0.89\n","123  |  Train loss: 0.177    Valid loss: 0.278    Valid accuracy: 0.89\n","124  |  Train loss: 0.178    Valid loss: 0.281    Valid accuracy: 0.89\n","125  |  Train loss: 0.176    Valid loss: 0.280    Valid accuracy: 0.89\n","126  |  Train loss: 0.177    Valid loss: 0.290    Valid accuracy: 0.89\n","127  |  Train loss: 0.176    Valid loss: 0.290    Valid accuracy: 0.89\n","128  |  Train loss: 0.176    Valid loss: 0.287    Valid accuracy: 0.89\n","129  |  Train loss: 0.175    Valid loss: 0.286    Valid accuracy: 0.89\n","130  |  Train loss: 0.174    Valid loss: 0.284    Valid accuracy: 0.89\n","131  |  Train loss: 0.173    Valid loss: 0.291    Valid accuracy: 0.89\n","132  |  Train loss: 0.175    Valid loss: 0.291    Valid accuracy: 0.89\n","133  |  Train loss: 0.173    Valid loss: 0.282    Valid accuracy: 0.88\n","134  |  Train loss: 0.173    Valid loss: 0.291    Valid accuracy: 0.89\n","135  |  Train loss: 0.173    Valid loss: 0.282    Valid accuracy: 0.88\n","136  |  Train loss: 0.171    Valid loss: 0.291    Valid accuracy: 0.88\n","137  |  Train loss: 0.172    Valid loss: 0.290    Valid accuracy: 0.89\n","138  |  Train loss: 0.170    Valid loss: 0.297    Valid accuracy: 0.89\n","139  |  Train loss: 0.170    Valid loss: 0.290    Valid accuracy: 0.89\n","140  |  Train loss: 0.170    Valid loss: 0.291    Valid accuracy: 0.89\n","141  |  Train loss: 0.169    Valid loss: 0.298    Valid accuracy: 0.89\n","142  |  Train loss: 0.170    Valid loss: 0.296    Valid accuracy: 0.89\n","143  |  Train loss: 0.168    Valid loss: 0.306    Valid accuracy: 0.89\n","144  |  Train loss: 0.168    Valid loss: 0.294    Valid accuracy: 0.89\n","145  |  Train loss: 0.167    Valid loss: 0.292    Valid accuracy: 0.89\n","146  |  Train loss: 0.168    Valid loss: 0.301    Valid accuracy: 0.89\n","147  |  Train loss: 0.166    Valid loss: 0.297    Valid accuracy: 0.89\n","148  |  Train loss: 0.166    Valid loss: 0.307    Valid accuracy: 0.89\n","149  |  Train loss: 0.165    Valid loss: 0.297    Valid accuracy: 0.89\n","150  |  Train loss: 0.163    Valid loss: 0.302    Valid accuracy: 0.89\n","151  |  Train loss: 0.164    Valid loss: 0.299    Valid accuracy: 0.89\n","152  |  Train loss: 0.164    Valid loss: 0.298    Valid accuracy: 0.89\n","153  |  Train loss: 0.164    Valid loss: 0.302    Valid accuracy: 0.89\n","154  |  Train loss: 0.164    Valid loss: 0.299    Valid accuracy: 0.89\n","155  |  Train loss: 0.162    Valid loss: 0.295    Valid accuracy: 0.88\n","156  |  Train loss: 0.162    Valid loss: 0.297    Valid accuracy: 0.89\n","157  |  Train loss: 0.162    Valid loss: 0.304    Valid accuracy: 0.89\n","158  |  Train loss: 0.159    Valid loss: 0.305    Valid accuracy: 0.89\n","159  |  Train loss: 0.160    Valid loss: 0.308    Valid accuracy: 0.89\n","160  |  Train loss: 0.159    Valid loss: 0.315    Valid accuracy: 0.89\n","161  |  Train loss: 0.160    Valid loss: 0.311    Valid accuracy: 0.89\n","162  |  Train loss: 0.157    Valid loss: 0.333    Valid accuracy: 0.89\n","163  |  Train loss: 0.159    Valid loss: 0.308    Valid accuracy: 0.89\n","164  |  Train loss: 0.159    Valid loss: 0.334    Valid accuracy: 0.89\n","165  |  Train loss: 0.156    Valid loss: 0.308    Valid accuracy: 0.89\n","166  |  Train loss: 0.156    Valid loss: 0.324    Valid accuracy: 0.89\n","167  |  Train loss: 0.157    Valid loss: 0.321    Valid accuracy: 0.89\n","168  |  Train loss: 0.156    Valid loss: 0.317    Valid accuracy: 0.89\n","169  |  Train loss: 0.155    Valid loss: 0.327    Valid accuracy: 0.89\n","170  |  Train loss: 0.155    Valid loss: 0.327    Valid accuracy: 0.89\n","171  |  Train loss: 0.155    Valid loss: 0.333    Valid accuracy: 0.89\n","172  |  Train loss: 0.152    Valid loss: 0.318    Valid accuracy: 0.89\n","173  |  Train loss: 0.153    Valid loss: 0.324    Valid accuracy: 0.89\n","174  |  Train loss: 0.152    Valid loss: 0.311    Valid accuracy: 0.88\n","175  |  Train loss: 0.150    Valid loss: 0.318    Valid accuracy: 0.89\n","176  |  Train loss: 0.150    Valid loss: 0.329    Valid accuracy: 0.89\n","177  |  Train loss: 0.151    Valid loss: 0.343    Valid accuracy: 0.89\n","178  |  Train loss: 0.148    Valid loss: 0.344    Valid accuracy: 0.90\n","179  |  Train loss: 0.150    Valid loss: 0.323    Valid accuracy: 0.89\n","180  |  Train loss: 0.150    Valid loss: 0.322    Valid accuracy: 0.89\n","181  |  Train loss: 0.148    Valid loss: 0.329    Valid accuracy: 0.89\n","182  |  Train loss: 0.149    Valid loss: 0.330    Valid accuracy: 0.88\n","183  |  Train loss: 0.147    Valid loss: 0.344    Valid accuracy: 0.89\n","184  |  Train loss: 0.147    Valid loss: 0.325    Valid accuracy: 0.89\n","185  |  Train loss: 0.145    Valid loss: 0.332    Valid accuracy: 0.88\n","186  |  Train loss: 0.145    Valid loss: 0.345    Valid accuracy: 0.89\n","187  |  Train loss: 0.144    Valid loss: 0.347    Valid accuracy: 0.88\n","188  |  Train loss: 0.144    Valid loss: 0.344    Valid accuracy: 0.88\n","189  |  Train loss: 0.145    Valid loss: 0.349    Valid accuracy: 0.89\n","190  |  Train loss: 0.143    Valid loss: 0.342    Valid accuracy: 0.90\n","191  |  Train loss: 0.142    Valid loss: 0.363    Valid accuracy: 0.89\n","192  |  Train loss: 0.141    Valid loss: 0.348    Valid accuracy: 0.88\n","193  |  Train loss: 0.141    Valid loss: 0.363    Valid accuracy: 0.89\n","194  |  Train loss: 0.140    Valid loss: 0.353    Valid accuracy: 0.89\n","195  |  Train loss: 0.139    Valid loss: 0.353    Valid accuracy: 0.89\n","196  |  Train loss: 0.140    Valid loss: 0.387    Valid accuracy: 0.89\n","197  |  Train loss: 0.139    Valid loss: 0.349    Valid accuracy: 0.89\n","198  |  Train loss: 0.137    Valid loss: 0.354    Valid accuracy: 0.88\n","199  |  Train loss: 0.138    Valid loss: 0.356    Valid accuracy: 0.89\n","200  |  Train loss: 0.137    Valid loss: 0.394    Valid accuracy: 0.90\n","201  |  Train loss: 0.138    Valid loss: 0.353    Valid accuracy: 0.88\n","202  |  Train loss: 0.137    Valid loss: 0.380    Valid accuracy: 0.89\n","203  |  Train loss: 0.135    Valid loss: 0.370    Valid accuracy: 0.88\n","204  |  Train loss: 0.136    Valid loss: 0.358    Valid accuracy: 0.89\n","205  |  Train loss: 0.132    Valid loss: 0.362    Valid accuracy: 0.89\n","206  |  Train loss: 0.131    Valid loss: 0.392    Valid accuracy: 0.89\n","207  |  Train loss: 0.133    Valid loss: 0.393    Valid accuracy: 0.88\n","208  |  Train loss: 0.130    Valid loss: 0.387    Valid accuracy: 0.89\n","209  |  Train loss: 0.132    Valid loss: 0.392    Valid accuracy: 0.89\n","210  |  Train loss: 0.129    Valid loss: 0.391    Valid accuracy: 0.88\n","211  |  Train loss: 0.130    Valid loss: 0.382    Valid accuracy: 0.89\n","212  |  Train loss: 0.130    Valid loss: 0.406    Valid accuracy: 0.88\n","213  |  Train loss: 0.128    Valid loss: 0.388    Valid accuracy: 0.89\n","214  |  Train loss: 0.128    Valid loss: 0.385    Valid accuracy: 0.89\n","215  |  Train loss: 0.128    Valid loss: 0.379    Valid accuracy: 0.88\n","216  |  Train loss: 0.126    Valid loss: 0.394    Valid accuracy: 0.89\n","217  |  Train loss: 0.126    Valid loss: 0.403    Valid accuracy: 0.88\n","218  |  Train loss: 0.126    Valid loss: 0.407    Valid accuracy: 0.89\n","219  |  Train loss: 0.125    Valid loss: 0.414    Valid accuracy: 0.89\n","220  |  Train loss: 0.125    Valid loss: 0.429    Valid accuracy: 0.90\n","221  |  Train loss: 0.124    Valid loss: 0.405    Valid accuracy: 0.89\n","222  |  Train loss: 0.123    Valid loss: 0.407    Valid accuracy: 0.89\n","223  |  Train loss: 0.124    Valid loss: 0.414    Valid accuracy: 0.89\n","224  |  Train loss: 0.122    Valid loss: 0.404    Valid accuracy: 0.89\n","225  |  Train loss: 0.122    Valid loss: 0.432    Valid accuracy: 0.89\n","226  |  Train loss: 0.122    Valid loss: 0.436    Valid accuracy: 0.89\n","227  |  Train loss: 0.121    Valid loss: 0.436    Valid accuracy: 0.89\n","228  |  Train loss: 0.119    Valid loss: 0.444    Valid accuracy: 0.89\n","229  |  Train loss: 0.120    Valid loss: 0.429    Valid accuracy: 0.89\n","230  |  Train loss: 0.118    Valid loss: 0.419    Valid accuracy: 0.89\n","231  |  Train loss: 0.118    Valid loss: 0.460    Valid accuracy: 0.88\n","232  |  Train loss: 0.120    Valid loss: 0.452    Valid accuracy: 0.88\n","233  |  Train loss: 0.116    Valid loss: 0.428    Valid accuracy: 0.88\n","234  |  Train loss: 0.117    Valid loss: 0.447    Valid accuracy: 0.89\n","235  |  Train loss: 0.114    Valid loss: 0.473    Valid accuracy: 0.90\n","236  |  Train loss: 0.114    Valid loss: 0.447    Valid accuracy: 0.89\n","237  |  Train loss: 0.116    Valid loss: 0.481    Valid accuracy: 0.90\n","238  |  Train loss: 0.115    Valid loss: 0.447    Valid accuracy: 0.89\n","239  |  Train loss: 0.113    Valid loss: 0.478    Valid accuracy: 0.89\n","240  |  Train loss: 0.112    Valid loss: 0.504    Valid accuracy: 0.90\n","241  |  Train loss: 0.113    Valid loss: 0.479    Valid accuracy: 0.89\n","242  |  Train loss: 0.112    Valid loss: 0.468    Valid accuracy: 0.89\n","243  |  Train loss: 0.112    Valid loss: 0.467    Valid accuracy: 0.90\n","244  |  Train loss: 0.111    Valid loss: 0.469    Valid accuracy: 0.89\n","245  |  Train loss: 0.110    Valid loss: 0.474    Valid accuracy: 0.89\n","246  |  Train loss: 0.110    Valid loss: 0.473    Valid accuracy: 0.89\n","247  |  Train loss: 0.109    Valid loss: 0.483    Valid accuracy: 0.89\n","248  |  Train loss: 0.109    Valid loss: 0.489    Valid accuracy: 0.90\n","249  |  Train loss: 0.106    Valid loss: 0.543    Valid accuracy: 0.89\n","250  |  Train loss: 0.108    Valid loss: 0.488    Valid accuracy: 0.89\n","251  |  Train loss: 0.106    Valid loss: 0.529    Valid accuracy: 0.89\n","252  |  Train loss: 0.105    Valid loss: 0.521    Valid accuracy: 0.89\n","253  |  Train loss: 0.105    Valid loss: 0.501    Valid accuracy: 0.88\n","254  |  Train loss: 0.103    Valid loss: 0.541    Valid accuracy: 0.89\n","255  |  Train loss: 0.104    Valid loss: 0.551    Valid accuracy: 0.89\n","256  |  Train loss: 0.103    Valid loss: 0.531    Valid accuracy: 0.89\n","257  |  Train loss: 0.104    Valid loss: 0.546    Valid accuracy: 0.89\n","258  |  Train loss: 0.103    Valid loss: 0.530    Valid accuracy: 0.89\n","259  |  Train loss: 0.101    Valid loss: 0.530    Valid accuracy: 0.88\n","260  |  Train loss: 0.101    Valid loss: 0.531    Valid accuracy: 0.89\n","261  |  Train loss: 0.100    Valid loss: 0.540    Valid accuracy: 0.89\n","262  |  Train loss: 0.099    Valid loss: 0.573    Valid accuracy: 0.89\n","263  |  Train loss: 0.101    Valid loss: 0.538    Valid accuracy: 0.89\n","264  |  Train loss: 0.099    Valid loss: 0.534    Valid accuracy: 0.89\n","265  |  Train loss: 0.098    Valid loss: 0.555    Valid accuracy: 0.89\n","266  |  Train loss: 0.098    Valid loss: 0.563    Valid accuracy: 0.89\n","267  |  Train loss: 0.098    Valid loss: 0.554    Valid accuracy: 0.89\n","268  |  Train loss: 0.098    Valid loss: 0.564    Valid accuracy: 0.88\n","269  |  Train loss: 0.100    Valid loss: 0.570    Valid accuracy: 0.88\n","270  |  Train loss: 0.097    Valid loss: 0.555    Valid accuracy: 0.89\n","271  |  Train loss: 0.096    Valid loss: 0.597    Valid accuracy: 0.88\n","272  |  Train loss: 0.100    Valid loss: 0.574    Valid accuracy: 0.89\n","273  |  Train loss: 0.093    Valid loss: 0.570    Valid accuracy: 0.89\n","274  |  Train loss: 0.092    Valid loss: 0.582    Valid accuracy: 0.89\n","275  |  Train loss: 0.093    Valid loss: 0.604    Valid accuracy: 0.89\n","276  |  Train loss: 0.100    Valid loss: 0.611    Valid accuracy: 0.89\n","277  |  Train loss: 0.093    Valid loss: 0.610    Valid accuracy: 0.89\n","278  |  Train loss: 0.092    Valid loss: 0.608    Valid accuracy: 0.90\n","279  |  Train loss: 0.090    Valid loss: 0.624    Valid accuracy: 0.89\n","280  |  Train loss: 0.090    Valid loss: 0.612    Valid accuracy: 0.89\n","281  |  Train loss: 0.090    Valid loss: 0.622    Valid accuracy: 0.89\n","282  |  Train loss: 0.088    Valid loss: 0.615    Valid accuracy: 0.89\n","283  |  Train loss: 0.090    Valid loss: 0.639    Valid accuracy: 0.89\n","284  |  Train loss: 0.090    Valid loss: 0.633    Valid accuracy: 0.89\n","285  |  Train loss: 0.089    Valid loss: 0.657    Valid accuracy: 0.89\n","286  |  Train loss: 0.088    Valid loss: 0.681    Valid accuracy: 0.89\n","287  |  Train loss: 0.086    Valid loss: 0.627    Valid accuracy: 0.89\n","288  |  Train loss: 0.086    Valid loss: 0.659    Valid accuracy: 0.89\n","289  |  Train loss: 0.085    Valid loss: 0.681    Valid accuracy: 0.89\n","290  |  Train loss: 0.086    Valid loss: 0.647    Valid accuracy: 0.89\n","291  |  Train loss: 0.089    Valid loss: 0.642    Valid accuracy: 0.89\n","292  |  Train loss: 0.085    Valid loss: 0.661    Valid accuracy: 0.89\n","293  |  Train loss: 0.085    Valid loss: 0.675    Valid accuracy: 0.89\n","294  |  Train loss: 0.083    Valid loss: 0.682    Valid accuracy: 0.89\n","295  |  Train loss: 0.086    Valid loss: 0.668    Valid accuracy: 0.89\n","296  |  Train loss: 0.082    Valid loss: 0.717    Valid accuracy: 0.89\n","297  |  Train loss: 0.081    Valid loss: 0.703    Valid accuracy: 0.89\n","298  |  Train loss: 0.080    Valid loss: 0.733    Valid accuracy: 0.89\n","299  |  Train loss: 0.081    Valid loss: 0.691    Valid accuracy: 0.89\n","300  |  Train loss: 0.082    Valid loss: 0.692    Valid accuracy: 0.89\n","301  |  Train loss: 0.088    Valid loss: 0.724    Valid accuracy: 0.90\n","302  |  Train loss: 0.078    Valid loss: 0.683    Valid accuracy: 0.89\n","303  |  Train loss: 0.082    Valid loss: 0.712    Valid accuracy: 0.89\n","304  |  Train loss: 0.078    Valid loss: 0.726    Valid accuracy: 0.89\n","305  |  Train loss: 0.077    Valid loss: 0.721    Valid accuracy: 0.89\n","306  |  Train loss: 0.077    Valid loss: 0.734    Valid accuracy: 0.89\n","307  |  Train loss: 0.088    Valid loss: 0.694    Valid accuracy: 0.89\n","308  |  Train loss: 0.077    Valid loss: 0.748    Valid accuracy: 0.89\n","309  |  Train loss: 0.075    Valid loss: 0.743    Valid accuracy: 0.89\n","310  |  Train loss: 0.076    Valid loss: 0.749    Valid accuracy: 0.89\n","311  |  Train loss: 0.075    Valid loss: 0.757    Valid accuracy: 0.89\n","312  |  Train loss: 0.074    Valid loss: 0.738    Valid accuracy: 0.89\n","313  |  Train loss: 0.078    Valid loss: 0.780    Valid accuracy: 0.89\n","314  |  Train loss: 0.078    Valid loss: 0.803    Valid accuracy: 0.89\n","315  |  Train loss: 0.077    Valid loss: 0.762    Valid accuracy: 0.89\n","316  |  Train loss: 0.072    Valid loss: 0.788    Valid accuracy: 0.89\n","317  |  Train loss: 0.071    Valid loss: 0.777    Valid accuracy: 0.89\n","318  |  Train loss: 0.071    Valid loss: 0.791    Valid accuracy: 0.89\n","319  |  Train loss: 0.073    Valid loss: 0.825    Valid accuracy: 0.89\n","320  |  Train loss: 0.074    Valid loss: 0.788    Valid accuracy: 0.89\n","321  |  Train loss: 0.071    Valid loss: 0.744    Valid accuracy: 0.89\n","322  |  Train loss: 0.068    Valid loss: 0.810    Valid accuracy: 0.89\n","323  |  Train loss: 0.070    Valid loss: 0.743    Valid accuracy: 0.89\n","324  |  Train loss: 0.074    Valid loss: 0.750    Valid accuracy: 0.89\n","325  |  Train loss: 0.069    Valid loss: 0.803    Valid accuracy: 0.89\n","326  |  Train loss: 0.067    Valid loss: 0.872    Valid accuracy: 0.89\n","327  |  Train loss: 0.071    Valid loss: 0.963    Valid accuracy: 0.89\n","328  |  Train loss: 0.072    Valid loss: 0.840    Valid accuracy: 0.89\n","329  |  Train loss: 0.076    Valid loss: 0.856    Valid accuracy: 0.89\n","330  |  Train loss: 0.068    Valid loss: 0.804    Valid accuracy: 0.89\n","331  |  Train loss: 0.065    Valid loss: 0.911    Valid accuracy: 0.89\n","332  |  Train loss: 0.064    Valid loss: 0.844    Valid accuracy: 0.89\n","333  |  Train loss: 0.064    Valid loss: 0.838    Valid accuracy: 0.88\n","334  |  Train loss: 0.073    Valid loss: 0.856    Valid accuracy: 0.89\n","335  |  Train loss: 0.066    Valid loss: 0.833    Valid accuracy: 0.89\n","336  |  Train loss: 0.071    Valid loss: 0.880    Valid accuracy: 0.89\n","337  |  Train loss: 0.069    Valid loss: 0.862    Valid accuracy: 0.89\n","338  |  Train loss: 0.063    Valid loss: 0.821    Valid accuracy: 0.89\n","339  |  Train loss: 0.062    Valid loss: 0.886    Valid accuracy: 0.89\n","340  |  Train loss: 0.061    Valid loss: 0.918    Valid accuracy: 0.89\n","341  |  Train loss: 0.061    Valid loss: 0.922    Valid accuracy: 0.89\n","342  |  Train loss: 0.061    Valid loss: 0.876    Valid accuracy: 0.89\n","343  |  Train loss: 0.078    Valid loss: 0.891    Valid accuracy: 0.89\n","344  |  Train loss: 0.064    Valid loss: 0.842    Valid accuracy: 0.88\n","345  |  Train loss: 0.058    Valid loss: 0.851    Valid accuracy: 0.89\n","346  |  Train loss: 0.059    Valid loss: 0.897    Valid accuracy: 0.89\n","347  |  Train loss: 0.059    Valid loss: 0.891    Valid accuracy: 0.89\n","348  |  Train loss: 0.059    Valid loss: 0.867    Valid accuracy: 0.88\n","349  |  Train loss: 0.076    Valid loss: 0.968    Valid accuracy: 0.88\n","350  |  Train loss: 0.060    Valid loss: 0.901    Valid accuracy: 0.89\n","351  |  Train loss: 0.059    Valid loss: 0.936    Valid accuracy: 0.89\n","352  |  Train loss: 0.058    Valid loss: 0.960    Valid accuracy: 0.89\n","353  |  Train loss: 0.057    Valid loss: 0.906    Valid accuracy: 0.89\n","354  |  Train loss: 0.056    Valid loss: 0.926    Valid accuracy: 0.89\n","355  |  Train loss: 0.073    Valid loss: 0.966    Valid accuracy: 0.89\n","356  |  Train loss: 0.064    Valid loss: 0.908    Valid accuracy: 0.89\n","357  |  Train loss: 0.055    Valid loss: 0.887    Valid accuracy: 0.89\n","358  |  Train loss: 0.055    Valid loss: 0.953    Valid accuracy: 0.89\n","359  |  Train loss: 0.053    Valid loss: 0.944    Valid accuracy: 0.89\n","360  |  Train loss: 0.055    Valid loss: 0.938    Valid accuracy: 0.89\n","361  |  Train loss: 0.054    Valid loss: 1.003    Valid accuracy: 0.88\n","362  |  Train loss: 0.064    Valid loss: 0.889    Valid accuracy: 0.88\n","363  |  Train loss: 0.076    Valid loss: 0.937    Valid accuracy: 0.89\n","364  |  Train loss: 0.053    Valid loss: 0.963    Valid accuracy: 0.89\n","365  |  Train loss: 0.054    Valid loss: 0.924    Valid accuracy: 0.89\n","366  |  Train loss: 0.052    Valid loss: 0.992    Valid accuracy: 0.88\n","367  |  Train loss: 0.053    Valid loss: 1.073    Valid accuracy: 0.88\n","368  |  Train loss: 0.072    Valid loss: 0.912    Valid accuracy: 0.88\n","369  |  Train loss: 0.051    Valid loss: 0.953    Valid accuracy: 0.89\n","370  |  Train loss: 0.050    Valid loss: 0.969    Valid accuracy: 0.89\n","371  |  Train loss: 0.049    Valid loss: 0.949    Valid accuracy: 0.89\n","372  |  Train loss: 0.051    Valid loss: 0.987    Valid accuracy: 0.89\n","373  |  Train loss: 0.050    Valid loss: 0.963    Valid accuracy: 0.89\n","374  |  Train loss: 0.049    Valid loss: 1.071    Valid accuracy: 0.89\n","375  |  Train loss: 0.070    Valid loss: 1.121    Valid accuracy: 0.89\n","376  |  Train loss: 0.054    Valid loss: 1.015    Valid accuracy: 0.88\n","377  |  Train loss: 0.051    Valid loss: 0.979    Valid accuracy: 0.89\n","378  |  Train loss: 0.045    Valid loss: 0.996    Valid accuracy: 0.89\n","379  |  Train loss: 0.047    Valid loss: 1.000    Valid accuracy: 0.89\n","380  |  Train loss: 0.046    Valid loss: 1.000    Valid accuracy: 0.89\n","381  |  Train loss: 0.048    Valid loss: 1.068    Valid accuracy: 0.89\n","382  |  Train loss: 0.061    Valid loss: 1.078    Valid accuracy: 0.89\n","383  |  Train loss: 0.048    Valid loss: 1.078    Valid accuracy: 0.89\n","384  |  Train loss: 0.046    Valid loss: 1.063    Valid accuracy: 0.89\n","385  |  Train loss: 0.050    Valid loss: 1.020    Valid accuracy: 0.89\n","386  |  Train loss: 0.046    Valid loss: 1.116    Valid accuracy: 0.89\n","387  |  Train loss: 0.044    Valid loss: 1.049    Valid accuracy: 0.89\n","388  |  Train loss: 0.044    Valid loss: 1.102    Valid accuracy: 0.89\n","389  |  Train loss: 0.058    Valid loss: 1.063    Valid accuracy: 0.89\n","390  |  Train loss: 0.046    Valid loss: 1.104    Valid accuracy: 0.88\n","391  |  Train loss: 0.042    Valid loss: 1.067    Valid accuracy: 0.89\n","392  |  Train loss: 0.043    Valid loss: 1.004    Valid accuracy: 0.89\n","393  |  Train loss: 0.043    Valid loss: 1.087    Valid accuracy: 0.89\n","394  |  Train loss: 0.041    Valid loss: 1.073    Valid accuracy: 0.89\n","395  |  Train loss: 0.046    Valid loss: 0.966    Valid accuracy: 0.88\n","396  |  Train loss: 0.052    Valid loss: 1.045    Valid accuracy: 0.89\n","397  |  Train loss: 0.043    Valid loss: 1.133    Valid accuracy: 0.89\n","398  |  Train loss: 0.039    Valid loss: 1.079    Valid accuracy: 0.88\n","399  |  Train loss: 0.042    Valid loss: 1.109    Valid accuracy: 0.88\n","400  |  Train loss: 0.040    Valid loss: 1.110    Valid accuracy: 0.89\n","401  |  Train loss: 0.042    Valid loss: 1.136    Valid accuracy: 0.89\n","402  |  Train loss: 0.039    Valid loss: 1.209    Valid accuracy: 0.89\n","403  |  Train loss: 0.053    Valid loss: 1.026    Valid accuracy: 0.89\n","404  |  Train loss: 0.045    Valid loss: 1.054    Valid accuracy: 0.88\n","405  |  Train loss: 0.044    Valid loss: 1.135    Valid accuracy: 0.89\n","406  |  Train loss: 0.036    Valid loss: 1.126    Valid accuracy: 0.89\n","407  |  Train loss: 0.037    Valid loss: 1.178    Valid accuracy: 0.89\n","408  |  Train loss: 0.038    Valid loss: 1.139    Valid accuracy: 0.89\n","409  |  Train loss: 0.036    Valid loss: 1.232    Valid accuracy: 0.89\n","410  |  Train loss: 0.057    Valid loss: 1.120    Valid accuracy: 0.89\n","411  |  Train loss: 0.037    Valid loss: 1.149    Valid accuracy: 0.88\n","412  |  Train loss: 0.036    Valid loss: 1.192    Valid accuracy: 0.89\n","413  |  Train loss: 0.036    Valid loss: 1.139    Valid accuracy: 0.88\n","414  |  Train loss: 0.036    Valid loss: 1.142    Valid accuracy: 0.88\n","415  |  Train loss: 0.054    Valid loss: 1.367    Valid accuracy: 0.89\n","416  |  Train loss: 0.040    Valid loss: 1.156    Valid accuracy: 0.89\n","417  |  Train loss: 0.031    Valid loss: 1.146    Valid accuracy: 0.88\n","418  |  Train loss: 0.032    Valid loss: 1.193    Valid accuracy: 0.89\n","419  |  Train loss: 0.033    Valid loss: 1.230    Valid accuracy: 0.89\n","420  |  Train loss: 0.033    Valid loss: 1.189    Valid accuracy: 0.89\n","421  |  Train loss: 0.038    Valid loss: 1.201    Valid accuracy: 0.88\n","422  |  Train loss: 0.036    Valid loss: 1.323    Valid accuracy: 0.89\n","423  |  Train loss: 0.040    Valid loss: 1.211    Valid accuracy: 0.89\n","424  |  Train loss: 0.036    Valid loss: 1.265    Valid accuracy: 0.88\n","425  |  Train loss: 0.032    Valid loss: 1.277    Valid accuracy: 0.89\n","426  |  Train loss: 0.032    Valid loss: 1.216    Valid accuracy: 0.88\n","427  |  Train loss: 0.031    Valid loss: 1.159    Valid accuracy: 0.88\n","428  |  Train loss: 0.032    Valid loss: 1.216    Valid accuracy: 0.89\n","429  |  Train loss: 0.043    Valid loss: 1.421    Valid accuracy: 0.88\n","430  |  Train loss: 0.039    Valid loss: 1.186    Valid accuracy: 0.89\n","431  |  Train loss: 0.030    Valid loss: 1.267    Valid accuracy: 0.89\n","432  |  Train loss: 0.028    Valid loss: 1.191    Valid accuracy: 0.88\n","433  |  Train loss: 0.035    Valid loss: 1.231    Valid accuracy: 0.89\n","434  |  Train loss: 0.029    Valid loss: 1.247    Valid accuracy: 0.89\n","435  |  Train loss: 0.035    Valid loss: 1.250    Valid accuracy: 0.89\n","436  |  Train loss: 0.028    Valid loss: 1.305    Valid accuracy: 0.89\n","437  |  Train loss: 0.029    Valid loss: 1.254    Valid accuracy: 0.89\n","438  |  Train loss: 0.051    Valid loss: 1.265    Valid accuracy: 0.89\n","439  |  Train loss: 0.029    Valid loss: 1.241    Valid accuracy: 0.88\n","440  |  Train loss: 0.026    Valid loss: 1.205    Valid accuracy: 0.88\n","441  |  Train loss: 0.027    Valid loss: 1.270    Valid accuracy: 0.89\n","442  |  Train loss: 0.028    Valid loss: 1.266    Valid accuracy: 0.88\n","443  |  Train loss: 0.027    Valid loss: 1.331    Valid accuracy: 0.89\n","444  |  Train loss: 0.028    Valid loss: 1.217    Valid accuracy: 0.89\n","445  |  Train loss: 0.048    Valid loss: 1.305    Valid accuracy: 0.89\n","446  |  Train loss: 0.025    Valid loss: 1.316    Valid accuracy: 0.88\n","447  |  Train loss: 0.027    Valid loss: 1.262    Valid accuracy: 0.89\n","448  |  Train loss: 0.027    Valid loss: 1.306    Valid accuracy: 0.89\n","449  |  Train loss: 0.025    Valid loss: 1.285    Valid accuracy: 0.89\n","450  |  Train loss: 0.026    Valid loss: 1.306    Valid accuracy: 0.89\n","451  |  Train loss: 0.042    Valid loss: 1.255    Valid accuracy: 0.89\n","452  |  Train loss: 0.036    Valid loss: 1.295    Valid accuracy: 0.89\n","453  |  Train loss: 0.023    Valid loss: 1.265    Valid accuracy: 0.89\n","454  |  Train loss: 0.022    Valid loss: 1.298    Valid accuracy: 0.89\n","455  |  Train loss: 0.025    Valid loss: 1.288    Valid accuracy: 0.89\n","456  |  Train loss: 0.023    Valid loss: 1.290    Valid accuracy: 0.89\n","457  |  Train loss: 0.024    Valid loss: 1.293    Valid accuracy: 0.89\n","458  |  Train loss: 0.032    Valid loss: 1.371    Valid accuracy: 0.89\n","459  |  Train loss: 0.038    Valid loss: 1.267    Valid accuracy: 0.89\n","460  |  Train loss: 0.022    Valid loss: 1.335    Valid accuracy: 0.89\n","461  |  Train loss: 0.025    Valid loss: 1.306    Valid accuracy: 0.89\n","462  |  Train loss: 0.024    Valid loss: 1.360    Valid accuracy: 0.89\n","463  |  Train loss: 0.025    Valid loss: 1.416    Valid accuracy: 0.89\n","464  |  Train loss: 0.019    Valid loss: 1.320    Valid accuracy: 0.89\n","465  |  Train loss: 0.023    Valid loss: 1.430    Valid accuracy: 0.89\n","466  |  Train loss: 0.039    Valid loss: 1.446    Valid accuracy: 0.89\n","467  |  Train loss: 0.026    Valid loss: 1.365    Valid accuracy: 0.89\n","468  |  Train loss: 0.019    Valid loss: 1.361    Valid accuracy: 0.89\n","469  |  Train loss: 0.020    Valid loss: 1.364    Valid accuracy: 0.89\n","470  |  Train loss: 0.020    Valid loss: 1.372    Valid accuracy: 0.89\n","471  |  Train loss: 0.023    Valid loss: 1.408    Valid accuracy: 0.89\n","472  |  Train loss: 0.031    Valid loss: 1.418    Valid accuracy: 0.88\n","473  |  Train loss: 0.047    Valid loss: 1.342    Valid accuracy: 0.89\n","474  |  Train loss: 0.024    Valid loss: 1.460    Valid accuracy: 0.89\n","475  |  Train loss: 0.019    Valid loss: 1.337    Valid accuracy: 0.89\n","476  |  Train loss: 0.018    Valid loss: 1.348    Valid accuracy: 0.89\n","477  |  Train loss: 0.019    Valid loss: 1.366    Valid accuracy: 0.89\n","478  |  Train loss: 0.017    Valid loss: 1.403    Valid accuracy: 0.89\n","479  |  Train loss: 0.019    Valid loss: 1.495    Valid accuracy: 0.89\n","480  |  Train loss: 0.032    Valid loss: 1.418    Valid accuracy: 0.89\n","481  |  Train loss: 0.024    Valid loss: 1.383    Valid accuracy: 0.89\n","482  |  Train loss: 0.021    Valid loss: 1.451    Valid accuracy: 0.89\n","483  |  Train loss: 0.017    Valid loss: 1.469    Valid accuracy: 0.89\n","484  |  Train loss: 0.016    Valid loss: 1.461    Valid accuracy: 0.88\n","485  |  Train loss: 0.018    Valid loss: 1.379    Valid accuracy: 0.89\n","486  |  Train loss: 0.024    Valid loss: 1.406    Valid accuracy: 0.89\n","487  |  Train loss: 0.020    Valid loss: 1.448    Valid accuracy: 0.89\n","488  |  Train loss: 0.054    Valid loss: 1.483    Valid accuracy: 0.89\n","489  |  Train loss: 0.018    Valid loss: 1.413    Valid accuracy: 0.89\n","490  |  Train loss: 0.014    Valid loss: 1.461    Valid accuracy: 0.89\n","491  |  Train loss: 0.014    Valid loss: 1.490    Valid accuracy: 0.89\n","492  |  Train loss: 0.019    Valid loss: 1.521    Valid accuracy: 0.89\n","493  |  Train loss: 0.015    Valid loss: 1.540    Valid accuracy: 0.89\n","494  |  Train loss: 0.020    Valid loss: 1.531    Valid accuracy: 0.89\n","495  |  Train loss: 0.017    Valid loss: 1.555    Valid accuracy: 0.88\n","496  |  Train loss: 0.017    Valid loss: 1.479    Valid accuracy: 0.88\n","497  |  Train loss: 0.026    Valid loss: 1.494    Valid accuracy: 0.88\n","498  |  Train loss: 0.037    Valid loss: 1.471    Valid accuracy: 0.89\n","499  |  Train loss: 0.016    Valid loss: 1.502    Valid accuracy: 0.89\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_dne2IsqJN2k"},"source":["# Salida\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":50},"id":"i6CA6k1KJSdZ","executionInfo":{"status":"ok","timestamp":1618789384040,"user_tz":180,"elapsed":591112,"user":{"displayName":"Exequiel Santucho","photoUrl":"","userId":"10709628178102361168"}},"outputId":"46107404-c2c0-4025-869f-710ae90b83ac"},"source":["# PREDICCIÓN DEL MODELO\n","predicted = modelo(X_infer)\n","predicted_index = torch.argmax(predicted, dim=1)\n","pos = ['DEF', 'FWD', 'GK', 'MID']\n","\n","resultado = [pos[i] for i in predicted_index]\n","ID_test = infer_data.iloc[:, 0].tolist()\n","\n","print(type(resultado))\n","print(type(ID_test))\n","dicc = {'Id':ID_test, 'Category': resultado}\n","SALIDA = pd.DataFrame(dicc)\n","SALIDA.tail(10)\n","\n","# SALIDA.to_csv('SALIDA_TP2_V1_conPesos_2.csv', index=False)\n","# files.download('SALIDA_TP2_V1_conPesos_2.csv')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'list'>\n","<class 'list'>\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_356248df-b600-4773-bc30-45a60ff3a01c\", \"SALIDA_TP2_V1_conPesos_2.csv\", 64356)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]}]}